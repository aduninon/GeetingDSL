/*
 * generated by Xtext 2.17.1
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.eclipse.xtext.util.StringInputStream
import org.junit.Assert
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.myDsl.Model

@ExtendWith(InjectionExtension)
@InjectWith(DSLMyProvider)
class MyDslParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	@Inject
	extension ValidationTestHelper
	
	@Inject
	Provider<ResourceSet> resourcesetProvider;
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void TestMyDSLImport() {
		val result = parseHelper.parse('''
			object object1 import "other.thingml"
			object1.portA
		''', URI.createURI("test.mydsl"),resourcesetProvider.get => [
			createResource(URI.createURI("other.thingml")) => [
				load(new StringInputStream('''
				thing thing1{
					message message1()
					provided port port1 {
						sends message1
					}
					statechart thing1 init state1 {
						state state1 {}
					}
				}
				protocol X;
				configuration thing1Cfg {
					instance thing1Inst:thing1
					connector thing1Inst.port1 over X
				}
			''', "UTF-8"), null)
			]
		])
		result.assertNoErrors
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
	
}
