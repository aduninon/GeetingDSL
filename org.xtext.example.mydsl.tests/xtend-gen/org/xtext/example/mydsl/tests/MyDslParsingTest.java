/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.tests.DSLMyProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(DSLMyProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  private Provider<ResourceSet> resourcesetProvider;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Hello Xtext!");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void TestMyDSLImport() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("object object1 import \"other.thingml\"");
      _builder.newLine();
      _builder.append("object1.portA");
      _builder.newLine();
      URI _createURI = URI.createURI("test.mydsl");
      ResourceSet _get = this.resourcesetProvider.get();
      final Procedure1<ResourceSet> _function = (ResourceSet it) -> {
        Resource _createResource = it.createResource(URI.createURI("other.thingml"));
        final Procedure1<Resource> _function_1 = (Resource it_1) -> {
          try {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("thing thing1{");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("message message1()");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("provided port port1 {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("sends message1");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("statechart thing1 init state1 {");
            _builder_1.newLine();
            _builder_1.append("\t\t");
            _builder_1.append("state state1 {}");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("protocol X;");
            _builder_1.newLine();
            _builder_1.append("configuration thing1Cfg {");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("instance thing1Inst:thing1");
            _builder_1.newLine();
            _builder_1.append("\t");
            _builder_1.append("connector thing1Inst.port1 over X");
            _builder_1.newLine();
            _builder_1.append("}");
            _builder_1.newLine();
            StringInputStream _stringInputStream = new StringInputStream(_builder_1.toString(), "UTF-8");
            it_1.load(_stringInputStream, null);
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        ObjectExtensions.<Resource>operator_doubleArrow(_createResource, _function_1);
      };
      ResourceSet _doubleArrow = ObjectExtensions.<ResourceSet>operator_doubleArrow(_get, _function);
      final Model result = this.parseHelper.parse(_builder, _createURI, _doubleArrow);
      this._validationTestHelper.assertNoErrors(result);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
