/**
 * generated by Xtext 2.17.1
 */
package org.xtext.example.mydsl.scoping;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.MyObject;
import org.xtext.example.mydsl.myDsl.MyPort;
import org.xtext.example.mydsl.scoping.AbstractMyDslScopeProvider;
import org.xtext.example.mydsl.scoping.Helpers;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  private final MyDslPackage mydslInstance = MyDslPackage.eINSTANCE;
  
  protected ArrayList<EObject> EMPTY = new ArrayList<EObject>();
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _myPort_Port = this.mydslInstance.getMyPort_Port();
    boolean _equals = Objects.equal(reference, _myPort_Port);
    if (_equals) {
      return Scopes.scopeFor(Helpers.allPorts(((MyPort) context)));
    } else {
      EReference _myPort_Object = this.mydslInstance.getMyPort_Object();
      boolean _equals_1 = Objects.equal(reference, _myPort_Object);
      if (_equals_1) {
        final EObject rootElement = EcoreUtil2.getRootContainer(context);
        final List<MyObject> candidates = EcoreUtil2.<MyObject>getAllContentsOfType(rootElement, MyObject.class);
        return Scopes.scopeFor(candidates);
      } else {
        System.err.println("ERROR !");
      }
    }
    return Scopes.scopeFor(this.EMPTY);
  }
}
