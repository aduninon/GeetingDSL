/*
 * generated by Xtext 2.17.1
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getAlternatives()); }
		(rule__Model__Alternatives)*
		{ after(grammarAccess.getModelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyObject
entryRuleMyObject
:
{ before(grammarAccess.getMyObjectRule()); }
	 ruleMyObject
{ after(grammarAccess.getMyObjectRule()); } 
	 EOF 
;

// Rule MyObject
ruleMyObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyObjectAccess().getGroup()); }
		(rule__MyObject__Group__0)
		{ after(grammarAccess.getMyObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMyPort
entryRuleMyPort
:
{ before(grammarAccess.getMyPortRule()); }
	 ruleMyPort
{ after(grammarAccess.getMyPortRule()); } 
	 EOF 
;

// Rule MyPort
ruleMyPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyPortAccess().getGroup()); }
		(rule__MyPort__Group__0)
		{ after(grammarAccess.getMyPortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMyObjectAssignment_0()); }
		(rule__Model__MyObjectAssignment_0)
		{ after(grammarAccess.getModelAccess().getMyObjectAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getMyPortAssignment_1()); }
		(rule__Model__MyPortAssignment_1)
		{ after(grammarAccess.getModelAccess().getMyPortAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyObject__Group__0__Impl
	rule__MyObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyObjectAccess().getMyobjectKeyword_0()); }
	'myobject'
	{ after(grammarAccess.getMyObjectAccess().getMyobjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyObject__Group__1__Impl
	rule__MyObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyObjectAccess().getNameAssignment_1()); }
	(rule__MyObject__NameAssignment_1)
	{ after(grammarAccess.getMyObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyObject__Group__2__Impl
	rule__MyObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyObjectAccess().getImportKeyword_2()); }
	'import'
	{ after(grammarAccess.getMyObjectAccess().getImportKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyObject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyObjectAccess().getImportPathAssignment_3()); }
	(rule__MyObject__ImportPathAssignment_3)
	{ after(grammarAccess.getMyObjectAccess().getImportPathAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyPort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyPort__Group__0__Impl
	rule__MyPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyPortAccess().getObjectAssignment_0()); }
	(rule__MyPort__ObjectAssignment_0)
	{ after(grammarAccess.getMyPortAccess().getObjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyPort__Group__1__Impl
	rule__MyPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyPortAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getMyPortAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyPort__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyPortAccess().getPortAssignment_2()); }
	(rule__MyPort__PortAssignment_2)
	{ after(grammarAccess.getMyPortAccess().getPortAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MyObjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMyObjectMyObjectParserRuleCall_0_0()); }
		ruleMyObject
		{ after(grammarAccess.getModelAccess().getMyObjectMyObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__MyPortAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMyPortMyPortParserRuleCall_1_0()); }
		ruleMyPort
		{ after(grammarAccess.getModelAccess().getMyPortMyPortParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyObjectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMyObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyObject__ImportPathAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyObjectAccess().getImportPathSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getMyObjectAccess().getImportPathSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__ObjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyPortAccess().getObjectMyObjectCrossReference_0_0()); }
		(
			{ before(grammarAccess.getMyPortAccess().getObjectMyObjectIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMyPortAccess().getObjectMyObjectIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getMyPortAccess().getObjectMyObjectCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyPort__PortAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyPortAccess().getPortPortCrossReference_2_0()); }
		(
			{ before(grammarAccess.getMyPortAccess().getPortPortIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMyPortAccess().getPortPortIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getMyPortAccess().getPortPortCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
